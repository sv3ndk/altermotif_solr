<?xml version="1.0" encoding="UTF-8" ?>
<!--
 This is a stripped down config file used for a simple example...  
 It is *not* a good example to work from. 
-->
<config>

  <luceneMatchVersion>LUCENE_34</luceneMatchVersion>

  <mainIndex>
    <useCompoundFile>false</useCompoundFile>
    <ramBufferSizeMB>64</ramBufferSizeMB>
    <mergeFactor>10</mergeFactor>
  </mainIndex>

  <jmx />

  <query>
    <!-- !! This configuration minimalistic to keep the config file short. Don't use it as the basis for your app! -->
    
    <!-- essential for filter query performance; goes hand-in-hand with faceting -->
    <filterCache class="solr.FastLRUCache"
                 size="512"
                 initialSize="512"
                 autowarmCount="0"/>
                 
    <queryResultCache class="solr.LRUCache"
                 size="512"
                 initialSize="512"
                 autowarmCount="0"/>
                 
    <documentCache class="solr.LRUCache"
                 size="512"
                 initialSize="512"
                 autowarmCount="0"/>
                 
    <enableLazyFieldLoading>true</enableLazyFieldLoading>
    
    <!--
    <listener event="firstSearcher" class="solr.QuerySenderListener">
      <arr name="queries">
        <lst>
          <str name="qt">/suggest</str>
          <str name="spellcheck.build">true</str>
        </lst>
      </arr>
    </listener>
    -->
  </query>

  <requestDispatcher handleSelect="true" >
    <!-- Request Parsing

         These settings indicate how Solr Requests may be parsed, and
         what restrictions may be placed on the ContentStreams from
         those requests

         enableRemoteStreaming - enables use of the stream.file
         and stream.url paramaters for specifying remote streams.

         multipartUploadLimitInKB - specifies the max size of
         Multipart File Uploads that Solr will alow in a Request.
         
         *** WARNING ***
         The settings below authorize Solr to fetch remote files, You
         should make sure your system has some authentication before
         using enableRemoteStreaming="true"

      --> 
    <requestParsers enableRemoteStreaming="true" 
                    multipartUploadLimitInKB="2048000" />
                    
    <!-- Set HTTP caching related parameters (for proxy caches and clients). -->
                        
    <!-- Development oriented configuration -->                    
    <httpCaching never304="true"/>

    <!-- Productin oriented configuration.  See HTTP caching section in Chapter 10 -->
    <!--httpCaching lastModifiedFrom="openTime"
                 etagSeed="SolrMusicBrainz" never304="false">
       <cacheControl>max-age=43200, must-revalidate</cacheControl>
    </httpCaching-->    
    
  </requestDispatcher>
  
  <!-- requestHandler plugins... incoming queries will be dispatched to the
     correct handler based on the path or the qt (query type) param.
     Names starting with a '/' are accessed with the a path equal to the 
     registered name.  Names without a leading '/' are accessed with:
      http://host/app/select?qt=name
     If no qt is defined, the requestHandler that declares default="true"
     will be used.
  -->
  <requestHandler name="standard" class="solr.SearchHandler" default="true">
    <!-- default values for query parameters -->
    <lst name="defaults">
      <str name="echoParams">explicit</str>
      <!--
      <int name="rows">10</int>
      <str name="fl">*</str>
      <str name="version">2.1</str>
      -->
    </lst>
  </requestHandler>

  <requestHandler name="mb_artists" class="solr.SearchHandler" enable="${artists:false}">
    <!-- default values for query parameters -->
    <lst name="defaults">
      <str name="defType">edismax</str>
      <str name="qf">a_name a_alias^0.8 a_member_name^0.4</str>
      <str name="pf">a_name a_alias^0.4 a_member_name^0.2</str>
      <str name="qs">1</str>
      <str name="ps">0</str>
      <str name="tie">0.1</str>
      <str name="q.alt">*:*</str>
    </lst>
    <!-- <arr name="last-components">
    <str>elevateArtists</str>
    </arr> -->
    <arr name="last-components">
      <str>spellcheck</str>
    </arr>
  </requestHandler>

  <requestHandler name="artistAutoComplete" class="solr.SearchHandler" enable="${artists:false}" startup="lazy">
    <!-- default values for query parameters -->
    <lst name="defaults">
      <str name="defType">dismax</str>
      <str name="qf">a_name a_alias^0.8 a_member_name^0.4</str>
      <str name="pf">a_name^0.5 a_alias^0.4 a_member_name^0.2</str>
      <str name="qs">1</str>
      <str name="ps">0</str>
      <str name="tie">0.1</str>
    </lst>
  </requestHandler>

  <requestHandler name="mb_releases" class="solr.SearchHandler" enable="${releases:false}">
    <!-- default values for query parameters -->
    <lst name="defaults">
      <str name="defType">edismax</str>
      <str name="qf">r_name r_a_name^0.4</str>
      <str name="pf">r_name^0.5 r_a_name^0.2</str>
      <str name="qs">1</str>
      <str name="ps">0</str>
      <str name="tie">0.1</str>
      <str name="q.alt">*:*</str>
    </lst>
  </requestHandler>

  <requestHandler name="mb_tracks" class="solr.SearchHandler" enable="${tracks:false}">
    <!-- default values for query parameters -->
    <lst name="defaults">
      <str name="defType">edismax</str>
      <str name="qf">t_name t_r_name^0.4 t_a_name^0.4</str>
      <str name="pf">t_name^0.5 t_r_name^0.2 t_a_name^0.2</str>
      <str name="qs">1</str>
      <str name="ps">0</str>
      <str name="tie">0.1</str>
      <str name="q.alt">*:*</str>
    </lst>
  </requestHandler>

  <requestHandler name="mlt_tracks" class="solr.MoreLikeThisHandler" enable="${tracks:false}" startup="lazy">
    <!-- default values for query parameters -->
    <lst name="defaults">
      <str name="mlt.fl">t_name</str>
      <str name="mlt.mintf">1</str>
      <str name="mlt.mindf">2</str>
      <str name="mlt.boost">true</str>
    </lst>
  </requestHandler>
  
   <!-- The spell check component can return a list of alternative spelling
  suggestions.  -->
  <searchComponent name="spellcheck" class="solr.SpellCheckComponent">
    <str name="queryAnalyzerFieldType">textSpell</str><!-- 'q' only -->

    <lst name="spellchecker">
      <str name="name">a_spell</str>
      <str name="field">a_spell</str>
      <str name="buildOnOptimize">true</str>
      <str name="spellcheckIndexDir">./spellchecker_a_spell</str>
      <!-- uncomment this to require terms to occur in 1% of the documents in order to be included in the dictionary
        <float name="thresholdTokenFrequency">.01</float>
      -->
    </lst>
    <lst name="spellchecker">
     <!-- Use previous spellchecker index with different distance measure -->
      <str name="name">jarowinkler</str>
      <str name="field">a_spell</str>
      <str name="distanceMeasure">org.apache.lucene.search.spell.JaroWinklerDistance</str>
      <str name="spellcheckIndexDir">./spellchecker_a_spell</str>
    </lst>
    <!-- just an example -->
    <lst name="spellchecker">
      <str name="name">file</str>
      <str name="classname">solr.FileBasedSpellChecker</str>
      <str name="sourceLocation">spellings.txt</str>
      <str name="characterEncoding">UTF-8</str>
      <str name="spellcheckIndexDir">./spellcheckerFile</str>
    </lst>
  </searchComponent>
  
  <requestHandler name="/suggest" class="solr.SearchHandler" startup="lazy">
    <lst name="defaults">
      <str name="spellcheck">true</str>
      <str name="spellcheck.dictionary">a_suggest</str>
      <str name="spellcheck.onlyMorePopular">true</str>
      <str name="spellcheck.count">5</str>
      <str name="spellcheck.collate">true</str>
    </lst>
    <arr name="components">
      <str>suggest</str>
    </arr>
  </requestHandler>
    
  <searchComponent name="suggest" class="solr.SpellCheckComponent">
    <lst name="spellchecker">
      <str name="name">a_suggest</str>
      <str name="classname">org.apache.solr.spelling.suggest.Suggester</str>
      <str name="lookupImpl">org.apache.solr.spelling.suggest.fst.FSTLookup</str>
      <!-- Alternatives to lookupImpl: 
           org.apache.solr.spelling.suggest.fst.FSTLookup   [finite state transducer] Solr 3.3
           org.apache.solr.spelling.suggest.jaspell.JaspellLookup [default, jaspell-based]
           org.apache.solr.spelling.suggest.tst.TSTLookup   [ternary trees]
      -->
      <str name="field">a_spell</str>  <!-- the indexed field to derive suggestions from -->
      <!-- <float name="threshold">0.005</float> commented out because names are inherently more unique so don't filter -->
      <str name="buildOnOptimize">true</str>
      <int name="weightBuckets">100</int><!-- an FST option -->
      <!--<str name="storeDir">suggest</str>-->
    </lst>
  </searchComponent>
  
  <searchComponent name="tvComponent" class="solr.TermVectorComponent" />
  
  <!-- A Req Handler for working with the tvComponent.  This is purely as an example.
  You will likely want to add the component to your already specified request handlers. -->
  <requestHandler name="tvrh" class="solr.SearchHandler" startup="lazy">
    <lst name="defaults">
      <bool name="tv">true</bool>
    </lst>
    <arr name="last-components">
      <str>tvComponent</str>
    </arr>
  </requestHandler>

  <searchComponent name="terms" class="solr.TermsComponent"/>

  <!-- A request handler for demonstrating the terms component for term-complete/suggest-->
  <requestHandler name="/termsSuggest" class="solr.SearchHandler" startup="lazy">
    <lst name="defaults">
      <bool name="terms">true</bool>
      <str name="terms.fl">a_spell</str>
      <str name="terms.sort">count</str>
      <int name="terms.limit">5</int>
      <!-- <int name="terms.mincount">2</int> -->
    </lst>     
    <arr name="components">
      <str>terms</str>
    </arr>
  </requestHandler>

  <!-- A request handler for using faceting to implement term-complete/suggest-->
  <requestHandler name="/termsSuggest2" class="solr.SearchHandler" startup="lazy">
    <lst name="defaults">
      <str name="q">*:*</str>
      <int name="rows">0</int>
      <bool name="facet">true</bool>
      <int name="facet.mincount">1</int>
      <int name="facet.limit">10</int>
      <!-- just need a facet.field and facet.prefix and maybe some fq filter queries -->
    </lst>     
  </requestHandler>

  <searchComponent name="highlight" class="solr.HighlightComponent">
    <highlighting>
      <!-- Configure the standard fragmenter -->
      <!-- This could most likely be commented out in the "default" case -->
      <fragmenter name="gap" 
                  default="true"
                  class="solr.highlight.GapFragmenter">
        <lst name="defaults">
          <int name="hl.fragsize">100</int>
        </lst>
      </fragmenter>

      <!-- A regular-expression-based fragmenter 
           (for sentence extraction) 
        -->
      <fragmenter name="regex" 
                  class="solr.highlight.RegexFragmenter">
        <lst name="defaults">
          <!-- slightly smaller fragsizes work better because of slop -->
          <int name="hl.fragsize">70</int>
          <!-- allow 50% slop on fragment sizes -->
          <float name="hl.regex.slop">0.5</float>
          <!-- a basic sentence pattern -->
          <str name="hl.regex.pattern">[-\w ,/\n\&quot;&apos;]{20,200}</str>
        </lst>
      </fragmenter>

      <!-- Configure the standard formatter -->
      <formatter name="html" 
                 default="true"
                 class="solr.highlight.HtmlFormatter">
        <lst name="defaults">
          <str name="hl.simple.pre"><![CDATA[<em>]]></str>
          <str name="hl.simple.post"><![CDATA[</em>]]></str>
        </lst>
      </formatter>

      <!-- Configure the standard encoder -->
      <encoder name="html" 
               default="true"
               class="solr.highlight.HtmlEncoder" />

      <!-- Configure the standard fragListBuilder -->
      <fragListBuilder name="simple" 
                       default="true"
                       class="solr.highlight.SimpleFragListBuilder"/>

      <!-- Configure the single fragListBuilder -->
      <fragListBuilder name="single" 
                       class="solr.highlight.SingleFragListBuilder"/>

      <!-- default tag FragmentsBuilder -->
      <fragmentsBuilder name="default" 
                        default="true"
                        class="solr.highlight.ScoreOrderFragmentsBuilder">
        <!-- 
        <lst name="defaults">
          <str name="hl.multiValuedSeparatorChar">/</str>
        </lst>
        -->
      </fragmentsBuilder>

      <!-- multi-colored tag FragmentsBuilder -->
      <fragmentsBuilder name="colored" 
                        class="solr.highlight.ScoreOrderFragmentsBuilder">
        <lst name="defaults">
          <str name="hl.tag.pre"><![CDATA[
               <b style="background:yellow">,<b style="background:lawgreen">,
               <b style="background:aquamarine">,<b style="background:magenta">,
               <b style="background:palegreen">,<b style="background:coral">,
               <b style="background:wheat">,<b style="background:khaki">,
               <b style="background:lime">,<b style="background:deepskyblue">]]></str>
          <str name="hl.tag.post"><![CDATA[</b>]]></str>
        </lst>
      </fragmentsBuilder>
    </highlighting>
  </searchComponent>

  <requestHandler name="/replication" class="solr.ReplicationHandler" >
    <lst name="master">
      <str name="enable">${solr.master.enable:false}</str>
      <str name="replicateAfter">startup</str>
      <str name="replicateAfter">commit</str>
      <str name="confFiles">stopwords.txt</str>
    </lst>
    <lst name="slave">
     <str name="enable">${solr.slave.enable:false}</str>
     <str name="masterUrl">http://localhost:8983/solr/${solr.core.name}/replication</str>
     <str name="pollInterval">00:00:60</str>
    </lst>
  </requestHandler>

  <requestHandler name="/update" class="solr.XmlUpdateRequestHandler" />

  <requestHandler name="/update/javabin" class="solr.BinaryUpdateRequestHandler" />

  <requestHandler name="/analysis" class="solr.AnalysisRequestHandler" />

  <requestHandler name="/update/csv" class="solr.CSVRequestHandler" startup="lazy" />
  
  <!-- XSLT Update Request Handler: Transforms incoming XML with stylesheet identified by tr= -->
  <requestHandler name="/update/xslt" class="solr.XsltUpdateRequestHandler" startup="lazy"/>

  <requestHandler name="/dih_artists_jdbc" class="org.apache.solr.handler.dataimport.DataImportHandler" enable="${artists:false}">
     <lst name="defaults">
        <str name="config">mb-dih-artists-jdbc.xml</str>
     </lst>
  </requestHandler>
  <requestHandler name="/dih_artists_xml" class="org.apache.solr.handler.dataimport.DataImportHandler" enable="${artists:false}">
     <lst name="defaults">
        <str name="config">mb-dih-artists-xml.xml</str>
     </lst>
  </requestHandler>
  <requestHandler name="/dih_releases_jdbc" class="org.apache.solr.handler.dataimport.DataImportHandler" enable="${releases:false}">
     <lst name="defaults">
        <str name="config">mb-dih-artists-xml.xml</str>
     </lst>
  </requestHandler>
  
  <requestHandler name="/browse" class="solr.SearchHandler">
     <lst name="defaults">
       <str name="echoParams">explicit</str>

       <str name="wt">velocity</str>

       <str name="v.template">browse</str>
       <str name="v.layout">layout</str>
       <str name="title">MusicBrainz</str>

       <str name="defType">edismax</str>
       <str name="mm">1</str>
       <str name="q.alt">*:*</str>
       <str name="rows">10</str>
       <str name="fl">*,score</str>
       <str name="mlt.qf">
         a_name^1.5 a_member_name^1.0
       </str>
       <str name="mlt.fl">a_name,a_member_name</str>
       <int name="mlt.count">3</int>
       <int name="mlt.mintf">1</int>
       <int name="mlt.mindf">2</int>
       <str name="mlt.boost">true</str>
       <str name="qf">
          a_name^1.5 a_member_name^1.0
       </str>
       <str name="pf">
          a_name^1.5 a_member_name^1.0
       </str>

       <!-- Faceting -->
       <str name="facet">on</str>
       <str name="facet.field">a_type</str>
       <str name="facet.field">type</str>
       <str name="facet.mincount">1</str>
       <str name="facet.range">a_release_date_latest</str>
       <str name="f.a_release_date_latest.facet.range.start">NOW/YEAR-10YEARS</str>
       <str name="f.a_release_date_latest.facet.range.end">NOW</str>
       <str name="f.a_release_date_latest.facet.range.gap">+1YEAR</str>
       <str name="f.a_release_date_latest.facet.range.other">before</str>
       <str name="f.a_release_date_latest.facet.range.other">after</str>

       <!-- Spellcheck -->
       <str name="spellcheck">on</str>
       <str name="spellcheck.dictionary">a_spell</str>
       <str name="spellcheck.collate">true</str>
       
       <!-- Highlighting defaults -->
       <str name="hl">on</str>
       <str name="hl.fl">a_name a_member_name</str>
       <str name="f.a_name.hl.fragsize">0</str>
       <str name="f.a_name.hl.alternateField">a_name</str>
     </lst>
     <arr name="last-components">
       <str>spellcheck</str>
     </arr>
  </requestHandler>  

  <requestHandler name="/admin/" class="org.apache.solr.handler.admin.AdminHandlers" />

  <!-- Echo the request contents back to the client -->
  <requestHandler name="/debug/dump" class="solr.DumpRequestHandler" startup="lazy" >
    <lst name="defaults">
     <str name="echoParams">explicit</str> <!-- for all params (including the default etc) use: 'all' -->
     <str name="echoHandler">true</str>
    </lst>
  </requestHandler>
  
  <!-- ping/healthcheck -->
  <requestHandler name="/admin/ping" class="solr.PingRequestHandler">
    <lst name="defaults">
      <str name="qt">standard</str>
      <str name="q">solrpingquery</str>
      <str name="echoParams">all</str>
    </lst>
  </requestHandler>

  <!-- XSLT response writer transforms the XML output by any xslt file found
    in Solr's conf/xslt directory.  Changes to xslt files are checked for
    every xsltCacheLifetimeSeconds.  
    -->
  <queryResponseWriter name="xslt" class="org.apache.solr.response.XSLTResponseWriter">
    <int name="xsltCacheLifetimeSeconds">5</int>
  </queryResponseWriter>

  <!-- config for the admin interface -->
  <admin>
    <defaultQuery>*:*</defaultQuery>

    <!-- configure a healthcheck file for servers behind a loadbalancer
    <healthcheck type="file">server-enabled</healthcheck>
    -->
  </admin>    
</config>

